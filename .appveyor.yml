# AU template: https://github.com/majkinetor/au-packages-template

version: '{build}'
pull_requests:
  do_not_increment_build_number: true
max_jobs: 1
#build_cloud: V-10-MAYNV
image: Visual Studio 2022
# History plugin requires complete log
#clone_depth: 5
branches:
  only:
  - master
#build:
#  verbosity: minimal

environment:
  # Set au version to use or omit to use the latest. Specify branch name to use development version from Github
  au_version: master
  au_push: true
  # Use 1 to test all, or N to split testing into N groups
  au_test_groups: 4

  # Github token to commit pushed packages to repository
  github_user_repo: tunisiano187/Chocolatey-packages
  github_api_key:
    secure: k80gVFMer6/9wd07GMUlUfE8ec8ttZ0OmER10rIow2xblSsNv6s7axexlvfT4u/ERTEIQ8A0/f+3aKxjZCfz9S5XROUK3QLFUahFgO3JXdR9qSVstfJt0Fa6+xcNLW2D

  # Gitter Integration
  gitter_webhook:
    secure: SuvLP4KrBXFvRRG7tcBiTUJvh8urQl3gOu4WYjLO9ZEXX0wZB3CwmIx1VnoA4I009yKsuPdPZ1P6NTuE7Vt9Cg==

  # Hash
  hash_algo: sha256
  
  # VT API Key
  VT_APIKEY:
    secure: L/54pv851SIun4fRQsrx3kbmvBjuPRYE0bwuH/tDwSZCDbqSsHFE2udKIXnGLNL9AFRz9bBLJmVPUqXabn3tBqO45DJpCq0XjUSDDseoBCg=

  # Mail credentials - for error notifications
  mail_user: helpdesk.choc@gmail.com
  mail_pass:
    secure: g3q4/u5581iqgaHEOXANHdd+AGhRVUT8osLi+AmmNdQ=
  mail_server: smtp.gmail.com
  mail_port: 587
  mail_enablessl: $true

  #ID of the gist used to save run results
  gist_id: 7032dea203873812b435f152ee3794bf

  #ID of the gist used to save test run results
  gist_id_test: 90d63f6b99678e483a3669aaf2b51a1f

  #Chocolatey API key - to push updated packages
  api_key:
    secure: aXQkG8BvsO7/zFDzAb7ADCdvottWbXf1sRoC34DUk9RIvzOiIdjprfw39CvNT4WK

  #Chocolatey version we want to use when checking for updates (usually latest).
  choco_version: '2.3.0'
  choco_version_pr: '2.2.0' # Should be kept to the version available one year ago
  nupkg_cache_path: C:\packages

  #Gitlab informations
  gitlab_user: tunisiano187   # GitLab username to use for the push
  gitlab_api_key:
    secure: /Y5grZ+4FFm0+dOyuSD9zBah6vtE26U/505yI3Vnw4Y=   # GitLab API key associated with gitlab_user
  gitlab_PushURL: https://gitlab.com/chocolatey-packages/automatic-updating.git   # GitLab URL to push to. Must be HTTP or HTTPS. e.g. https://git.example.org/jekotia/au.git
  gitlab_commit_strategy: atomictag

init:
- git config --global user.email "helpdesk.choc@gmail.com"
- git config --global user.name "tunisiano187"
- git config --global core.safecrlf false

install:
- ps: |
    $chocoVersion = if (($Env:APPVEYOR_PULL_REQUEST_NUMBER -eq $null) -or ($ENV:APPVEYOR_PULL_REQUEST_NUMBER -eq '')) { $Env:choco_version } else { $Env:choco_version_pr }
    if (!(Test-Path "$env:nupkg_cache_path")) { $firstrun = "yes" }
    if (!(Test-Path "$env:nupkg_cache_path")) { mkdir -Force "$env:nupkg_cache_path" }
    @{
      '7zip.install' = '24.7.0'
      'chocolatey' = $chocoVersion
      'chocolatey-misc-helpers.extension' = '0.0.4'
      'wormies-au-helpers' = '0.4.1'
      'checksum' = '0.3.1'
      'keepass.install' = '2.57.0'
      'vt-cli' = '1.0.0'
      'autohotkey' = '1.1.37.1'
      'pngquant' = '3.0.3'
      'jpegoptim' =  '1.5.5.1'

    }.GetEnumerator() | % {
      if (!(Test-Path "${env:nupkg_cache_path}\$($_.Key).$($_.Value).nupkg")) { rm "${env:nupkg_cache_path}\$($_.Key).*.nupkg" ; iwr "https://chocolatey.org/api/v2/package/$($_.Key)/$($_.Value)" -OutFile "${env:nupkg_cache_path}\$($_.Key).$($_.Value).nupkg" }
      if ($_.Key -eq 'chocolatey') { choco update $_.Key --version $_.Value --source ${env:nupkg_cache_path} --allow-downgrade --pre }
      else { choco install -y $_.Key --version $_.Value --source ${env:nupkg_cache_path} --ignore-dependencies }
    }
    choco upgrade -y chocolatey
    rm "$env:ChocolateyInstall\logs\*.log"

- ps: 'Get-CimInstance win32_operatingsystem -Property Caption, OSArchitecture, Version | fl Caption, OSArchitecture, Version'
- ps: $PSVersionTable
- git --version
- choco --version
- ps: |
    git clone -q https://github.com/tunisiano187/chocolatey-au.git $Env:TEMP/au
    install-module Wormies-AU-Helpers -Force
    Copy-Item setup/AU $Env:TEMP/au/AU -Recurse -Force
    Copy-Item setup/build.ps1 -Destination $Env:TEMP/au/ -Force
    . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version

- ps: |
    "Build info"
    '  {0,-20} {1}' -f 'SCHEDULED BUILD:', ($Env:APPVEYOR_SCHEDULED_BUILD -eq 'true')
    '  {0,-20} {1}' -f 'FORCED BUILD:'   , ($Env:APPVEYOR_FORCED_BUILD    -eq 'true')
    '  {0,-20} {1}' -f 'RE BUILD:'       , ($Env:APPVEYOR_RE_BUILD        -eq 'true')
build_script:
- ps: |
    $ErrorActionPreference = 'Continue'

    Write-Host "Installing requisites"
    setup/requisites.ps1
    
    . ./scripts/EventLogs.ps1
    Clear-EventLogs

    if ($Env:APPVEYOR_PROJECT_NAME  -like '*test*') { ./test_all.ps1 "random $Env:au_test_groups"; return }
    if (($Env:APPVEYOR_PULL_REQUEST_NUMBER -ne $null) -and ($Env:APPVEYOR_PULL_REQUEST_NUMBER -ne '')) {
      Set-Service wuauserv -StartupType Manual
      ./scripts/Test-RepoPackage.ps1 -CleanFiles -TakeScreenshots
      return
    } else {
      # Clean the choco logs as it's quite large
      rm "$env:ChocolateyInstall\logs\*.log"
    }
    if ( ($Env:APPVEYOR_SCHEDULED_BUILD -ne 'true') -and ($Env:APPVEYOR_FORCED_BUILD -ne 'true') ) {
        switch -regex ($Env:APPVEYOR_REPO_COMMIT_MESSAGE)
        {
            '\[AU (.+?)\]'   { $forced = $Matches[1] }
            '\[PUSH (.+?)\]' {
                $packages = $Matches[1] -split ' '
                Write-Host "PUSHING PACKAGES: $packages"
                foreach ($package in $packages) {
                    Write-Host ("{0}`n{1}`n" -f ('-'*60), "PACKAGE: $package")
                    $package_dir = ls -recurse | ? { $_.Name -eq "$package.nuspec"} | select -First 1 | % Directory

                    if (!$package_dir) { Write-Warning "Can't find package '$package'"; continue }
                    pushd $package_dir
                      if (Test-Path update.ps1 -ea 0) { ./update.ps1 }
                      choco pack; Push-Package -All;
                    popd
                }
                return
            }
        }
        $lastupdated=git log -1 --stat | Where-Object {$_ -match "automatic"} | Where-Object {$_ -notmatch "'automatic"}
        if($lastupdated.Count -ne 0 -and ($Env:APPVEYOR_SCHEDULED_BUILD -ne 'true')) {
          $Env:au_Push = "false"
          $packages = $lastupdated.split('/').split(' ')
          Write-Host "PUSHING PACKAGES: $packages"
          foreach ($line in $packages) {
              $package = $line.split(' ')
              if($package -ne 'automatic' -AND $package -notmatch '\+' -AND $package -notmatch '^\-' -AND $package -notmatch 'update\.ps1') {
                Write-Host ("{0}`n{1}`n" -f ('-'*60), "PACKAGE: $package")
                $package_dir = ls -recurse | ? { $_.Name -eq "$package.nuspec"} | select -First 1 | % Directory

                if (!$package_dir) { Write-Warning "Can't find package '$package'"; continue }
                pushd $package_dir
                  if (Test-Path update.ps1 -ea 0) { ./update.ps1 }
                  choco pack; Push-Package -All;
                popd
              }
          }
          return
        } else {
          write-host "None Forced"
        }
    }
    #git remote set-url origin https://$($env:gitlab_user):$($env:gitlab_api_key)@gitlab.com/chocolatey-packages/automatic-updating.git
    git remote set-url origin https://$($env:github_api_key):x-oauth-basic@github.com/tunisiano187/Chocolatey-packages.git
    git config --global user.email "helpdesk.choc@gmail.com"
    git config --global user.name "$env:gitlab_user"
    git checkout master
    cd scripts
    Import-Module .\au_extensions.psm1
    cd ..
    $moduleWormiesPath = "$Env:ProgramFiles\WindowsPowerShell\Modules\Wormies-AU-Helpers\public\Update-Metadata.ps1"
    $moduleWormiesPath = Resolve-Path $moduleWormiesPath
    Copy-Item scripts/Update-Metadata.ps1 $moduleWormiesPath
    Write-Host "Checking nuspec errors"
    scripts/Find-NuspecError.ps1
    git commit -am "Nuspec errors"
    Write-Host "updating packageSourceUrl"
    scripts/Update-PackageSourceUrl.ps1 -GithubRepository "tunisiano187/Chocolatey-packages" -UseStopwatch
    git commit -am "PackageSourceUrl"
    Write-Host "updating variables in ps1"
    scripts/Update-Variables.ps1
    git commit -am "ps1 vars"
    Write-Host "updating IconUrl in nuspec"
    scripts/Update-IconUrl.ps1 -Quiet -GithubRepository "tunisiano187/Chocolatey-packages" -UseStopwatch
    git commit -am "Updating icons"
    Write-Host "updating owners in nuspec"
    import-module Wormies-AU-Helpers
    $nuspec=Get-ChildItem ./*.nuspec -Recurse; foreach ($file in $nuspec) { Update-Metadata -key owners -value "tunisiano" -NuspecFile $file.FullName }
    git commit -am "Updating owner"
    Write-Host "Updating Packages.md"
    scripts/ListPackages.ps1
    git commit -am "List packages"
    Write-host "Check broken package"
    tools/looknewer.ps1
    git commit -am "Broken packages"
    Write-host "Remove NoCheckChocoVersion"
    scripts/Remove-Nocheck.ps1
    git commit -am "Remove NoCheckChocoVersion"
    Write-Host "updating packages"
    if ($firstrun -ne 'yes') { au/update_all.ps1 -ForcedPackages $forced }
    Get-EventLogs * | ? Source -eq 'Schannel' | fl * |  out-file eventlogs.txt
on_finish:
- ps: |
    if (Test-Path $Env:TEMP\chocolatey\au) { 7z a  -mx9 au_temp.7z $Env:TEMP\chocolatey\au\* }
    $paths = @(
      Resolve-Path "$env:TEMP\artifacts\*" -ea 0
      Resolve-Path "$env:ChocolateyInstall\logs\*.log" -ea 0
      'au_temp.7z'
      'update_info.xml'
      'Update-AUPackages.md'
      'Update-History.md'
      'eventlogs.txt'
    )
    $paths | ? { Test-Path $_ } | % { Push-AppveyorArtifact $_ }
    Remove-Item -Path $env:TEMP -Recurse -Force -ErrorAction SilentlyContinue
#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

notifications:
- provider: Email
  to: $(mail_user)
  on_build_success: false
  on_build_failure: true
  on_build_status_changed: true
- provider: GitHubPullRequest
  template: "{{#passed}}:white_check_mark: Package verification completed without issues. PR is now pending human review{{/passed}}{{#failed}}:x: Package verification failed, please review the [Appveyor Logs]({{buildUrl}}) and the provided [Artifacts]({{buildUrl}}/artifacts) before requesting a human reviewer to take a look.{{/failed}}"
#- provider: Webhook
#  url: https://webhooks.gitter.im/e/e7cfeb1b6fc707cee118
#  on_build_success: true
#  on_build_failure: true
#  on_build_status_changed: true

cache:
  - '%nupkg_cache_path% -> .appveyor.yml'
